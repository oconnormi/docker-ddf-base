#!/bin/bash

# Created by argbash-init v2.6.1
# ARG_OPTIONAL_SINGLE([output],[o],[Specify the output location],[/tmp])
# ARG_POSITIONAL_SINGLE([data_source],[Specify the location of the source data. Supported protocols are http(s):// and file://])
# ARG_DEFAULTS_POS()
# ARG_HELP([Retrieves archived data from a local or remote source and unpacks it])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='oh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_data_source=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output="/tmp"


print_help()
{
	printf '%s\n' "Retrieves archived data from a local or remote source and unpacks it"
	printf 'Usage: %s [-o|--output <arg>] [-h|--help] <data_source>\n' "$0"
	printf '\t%s\n' "<data_source>: Specify the location of the source data. Supported protocols are http(s):// and file://"
	printf '\t%s\n' "-o, --output: Specify the output location (default: '/tmp')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-o|--output)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			-o*)
				_arg_output="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'data_source'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_data_source "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

#  <-- needed because of ArgbashÂ 

_archive_staging_path=/tmp/get_data/archives

# Two params
# $1: URL to download
# $2: staging location
function retrieveRemoteData() {
  _url=${1}
  _dest=${2}
  echo -e "Retrieving remote metadata archive.\n\tFrom:\t\t${_url}\n\tStaging:\t${_dest}"
  if curl -LsSk -o /dev/null -s -f -r 0-0 "${_url}"; then
    mkdir -p $(dirname ${_dest})
    curl -LsSk ${_url} -o ${_dest}
    return 0
  else
    echo "Unable to retrieve from: ${_url}"
    return 1
  fi
}

# Two params
# $1: Path to copy from
# $2: Path to copy to
function copyLocalData() {
  _path=${1#*//}
  _dest=${2}
  if [ ! -f ${_path} ]; then
    echo "Local data archive: ${_path} does not exist!"
    return 1
  fi

  mkdir -p $(dirname ${_dest})
  echo -e "Copying local data archive.\n\tFrom:\t${_path}\n\tTo:\t${_dest}"
  cp ${_path} ${_dest}
  if [ ! -f ${_dest} ]; then
    echo "Unable to stage archive to destination: ${_dest}"
    return 1
  fi
}

# Three params
# $1: src path for archive
# $2: dest path for extraction
# $2: archive type
function unpackData() {
  _src=${1}
  _dest=${2}
  _type=${3}

  mkdir -p ${_dest}

  if [ -n "${_type}" ]; then
    _type=${_src#*.}
  fi

  echo -e "Extracting archive.\n\tType:\t${_type}\n\tSrc:\t${_src}\n\tDest:\t${_dest}"
  case ${_type} in
    "zip" )
      unzip -q ${_src} -d ${_dest} && rm -rf ${_src}
      return $?
      ;;
    "tar.gz" | "tgz" )
      tar xzf ${_src} -C ${_dest} && rm -rf ${_src}
      return $?
      ;;
    "tar" )
      tar xf ${_src} -C ${_dest} && rm -rf ${_src}
      return $?
      ;;
    * )
      echo "Unsupported archive type"
      return 1
  esac
}

function main {

  mkdir -p ${_archive_staging_path}

  _data_filename=$(basename ${_arg_data_source})
  _data_format=${_data_filename#*.}
  _tmp_path="${_archive_staging_path}/${_data_filename}"
  _staging_archive_path="${_arg_output}/${_data_filename%%.*}/${_data_filename}"

  case "${_arg_data_source}" in
    http*://* )
      retrieveRemoteData ${_arg_data_source} ${_tmp_path} \
      && unpackData ${_tmp_path} ${_arg_output} ${_data_format} \
      return $?
      ;;
    file://* )
      copyLocalData ${_arg_data_source} ${_tmp_path} \
      && unpackData ${_tmp_path} ${_arg_output} ${_data_format} \
      return $?
      ;;
    * )
      echo -e "Unsupported file location, must be one of\n\thttps://\n\thttp://\n\tfile://"
      return 1
  esac

}

main
exit $?

# ] <-- needed because of Argbash
