#!/bin/bash

_source_templates_directory=${SOURCE_TEMPLATES_DIRECTORY:=$ENTRYPOINT_HOME/templates/sources}

# This script uses templates in order to generate configurations for external sources
# bin/argbash-init --pos source-type --pos source-name --opt username --opt password --opt url --opt config-directory --opt template-directory create-source.m4

# Created by argbash-init v2.5.0
# ARG_OPTIONAL_SINGLE([username],[u],[Credentials for the source])
# ARG_OPTIONAL_SINGLE([password],[p],[Credentials for the source])
# ARG_OPTIONAL_SINGLE([url],[],[the source's address])
# ARG_OPTIONAL_SINGLE([config-directory],[c],[location where the configuration file will be created])
# ARG_OPTIONAL_SINGLE([template-directory],[t],[location ofthe template file used to make the config],[${_source_templates_directory}])
# ARG_POSITIONAL_SINGLE([source-type],[The template that will be used to generate the source configuration])
# ARG_POSITIONAL_SINGLE([source-name],[Desired name for the source])
# ARG_HELP([Create a source configuration file])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.7.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='upcth'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_username=
_arg_password=
_arg_url=
_arg_config_directory=
_arg_template_directory="${_source_templates_directory}"


print_help()
{
	printf '%s\n' "Create a source configuration file"
	printf 'Usage: %s [-u|--username <arg>] [-p|--password <arg>] [--url <arg>] [-c|--config-directory <arg>] [-t|--template-directory <arg>] [-h|--help] <source-type> <source-name>\n' "$0"
	printf '\t%s\n' "<source-type>: The template that will be used to generate the source configuration"
	printf '\t%s\n' "<source-name>: Desired name for the source"
	printf '\t%s\n' "-u, --username: Credentials for the source (no default)"
	printf '\t%s\n' "-p, --password: Credentials for the source (no default)"
	printf '\t%s\n' "--url: the source's address (no default)"
	printf '\t%s\n' "-c, --config-directory: location where the configuration file will be created (no default)"
	printf '\t%s\n' "-t, --template-directory: location ofthe template file used to make the config (default: '${_source_templates_directory}')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-u|--username)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_username="$2"
				shift
				;;
			--username=*)
				_arg_username="${_key##--username=}"
				;;
			-u*)
				_arg_username="${_key##-u}"
				;;
			-p|--password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_password="$2"
				shift
				;;
			--password=*)
				_arg_password="${_key##--password=}"
				;;
			-p*)
				_arg_password="${_key##-p}"
				;;
			--url)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_url="$2"
				shift
				;;
			--url=*)
				_arg_url="${_key##--url=}"
				;;
			-c|--config-directory)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_config_directory="$2"
				shift
				;;
			--config-directory=*)
				_arg_config_directory="${_key##--config-directory=}"
				;;
			-c*)
				_arg_config_directory="${_key##-c}"
				;;
			-t|--template-directory)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_template_directory="$2"
				shift
				;;
			--template-directory=*)
				_arg_template_directory="${_key##--template-directory=}"
				;;
			-t*)
				_arg_template_directory="${_key##-t}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'source-type' and 'source-name'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_source_type _arg_source_name "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

#
start_time=`date +%s`

if [ -z "$_arg_source_type" ]; then
  echo "No arguments supplied!"; exit 1;
fi

url=$_arg_url
config_dir=${_arg_config_directory%/}
template_dir=${_arg_template_directory%/}
config=$_arg_source_type
name=$_arg_source_name
password=$_arg_password

function generateConfigUUID() {
  cat /dev/urandom | LC_CTYPE=C tr -dc "a-f0-9" | fold -w 32 | head -n 1
}

function generateServicePid() {
  echo "${_cdm_pid}$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 8 | head -n 1)\
-$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 4 | head -n 1)\
-$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 4 | head -n 1)\
-$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 4 | head -n 1)\
-$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-f0-9' | fold -w 12 | head -n 1)"
}

uuid=$(generateConfigUUID)
pid=$(generateServicePid)
file_name="$config-$uuid.config"

if [ -e $file_name ]; then
  echo "File $file_name already exists!" >&2; exit 1
else

  export name username password url pid

  if [ ! -f "$template_dir/$config.config" ]; then
    echo "Template file $config.config could not be found in path $template_dir." >&2; exit 1
  fi

  if [ ! -d "$config_dir" ]; then
    echo "File $config.config cannot be created in $config_dir, since the directory does not exist." >&2; exit 1
  fi

  echo "Attempting to create source configuration file $config.config with the following arguments"
  echo "name: $name"
  echo "url: $url"
  echo "username: $username"

  envsubst < "$template_dir/$config.config" > "$config_dir/$file_name"

  unset name username password url pid

  end_time=`date +%s`
  echo "Configuration file $config_dir/$file_name created in $((end_time-start_time)) seconds"
fi
#
# ] <-- needed because of Argbash
